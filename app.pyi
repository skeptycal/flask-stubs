# Stubs for flask.app (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from logging import Logger
from types import TracebackType
from typing import Any, Optional, IO, Dict, Iterator, Callable, Type
from werkzeug.exceptions import HTTPException
from werkzeug.routing import Map
from werkzeug.wrappers import Response
from ._compat import integer_types, reraise, string_types, text_type
from .blueprints import Blueprint
from .config import Config, ConfigAttribute
from .ctx import AppContext, RequestContext, _AppCtxGlobals
from .globals import _request_ctx_stack, g, request, session
from .helpers import (
    _PackageBoundObject,
    _endpoint_from_view_func,
    find_package,
    get_debug_flag,
    get_env,
    get_flashed_messages,
    get_load_dotenv,
    locked_cached_property,
    url_for,
)
from .logging import create_logger
from .sessions import SecureCookieSessionInterface, SessionMixin
from .signals import (
    appcontext_tearing_down,
    got_request_exception,
    request_finished,
    request_started,
    request_tearing_down,
)
from .templating import (
    DispatchingJinjaLoader,
    Environment,
    _default_template_ctx_processor,
)
from .wrappers import Request, Response

_OptExcInfo = Tuple[
    Optional[Type[BaseException]],
    Optional[BaseException],
    Optional[TracebackType],
]
_RVBody = Union[str, bytes, response_class, Response, Callable[..., Any]]
_RVStatus = Union[str, int]
_RVHeaders = Union[Dict[str, Any], List[Any]]
_ViewRV = Union[
    str,
    bytes,
    Tuple[_RVBody, _RVStatus, _RVHeaders],
    Tuple[_RVBody, _RVStatus],
    Tuple[_RVBody, _RVHeaders],
    response_class,
    Response,
    Callable[..., Any],
]

def setupmethod(f: Any): ...

class Flask(_PackageBoundObject):
    request_class: Any = ...
    response_class: Any = ...
    jinja_environment: Any = ...
    app_ctx_globals_class: Any = ...
    config_class: Any = ...
    testing: Any = ...
    secret_key: Any = ...
    session_cookie_name: Any = ...
    permanent_session_lifetime: Any = ...
    send_file_max_age_default: Any = ...
    use_x_sendfile: Any = ...
    json_encoder: Any = ...
    json_decoder: Any = ...
    jinja_options: Any = ...
    default_config: Any = ...
    url_rule_class: Any = ...
    test_client_class: Any = ...
    test_cli_runner_class: Any = ...
    session_interface: Any = ...
    import_name: Any = ...
    template_folder: Any = ...
    root_path: Any = ...
    static_url_path: Any = ...
    static_folder: Any = ...
    instance_path: Any = ...
    config: Any = ...
    view_functions: Any = ...
    error_handler_spec: Any = ...
    url_build_error_handlers: Any = ...
    before_request_funcs: Any = ...
    before_first_request_funcs: Any = ...
    after_request_funcs: Any = ...
    teardown_request_funcs: Any = ...
    teardown_appcontext_funcs: Any = ...
    url_value_preprocessors: Any = ...
    url_default_functions: Any = ...
    template_context_processors: Any = ...
    shell_context_processors: Any = ...
    blueprints: Any = ...
    extensions: Any = ...
    url_map: Any = ...
    subdomain_matching: Any = ...
    cli: Any = ...
    def __init__(
        self,
        import_name: str,
        static_url_path: Optional[str] = ...,
        static_folder: str = ...,
        static_host: Optional[str] = ...,
        host_matching: bool = ...,
        subdomain_matching: bool = ...,
        template_folder: str = ...,
        instance_path: Optional[str] = ...,
        instance_relative_config: bool = ...,
        root_path: Optional[str] = ...,
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def propagate_exceptions(self) -> bool: ...
    @property
    def preserve_context_on_exception(self) -> bool: ...
    @property
    def logger(self) -> logging.Logger: ...
    @property
    def jinja_env(self) -> Environment: ...
    @property
    def got_first_request(self) -> bool: ...
    def make_config(self, instance_relative: bool = ...) -> Config: ...
    def auto_find_instance_path(self) -> str: ...
    def open_instance_resource(self, resource: str, mode: str = ...) -> IO: ...
    templates_auto_reload: bool = ...
    def create_jinja_environment(self) -> Environment: ...
    def create_global_jinja_loader(self) -> DispatchingJinjaLoader: ...
    def select_jinja_autoescape(self, filename: str) -> bool: ...
    def update_template_context(self, context: Dict[str, Any]) -> None: ...
    def make_shell_context(self) -> Dict[str, Any]: ...
    env: ConfigAttribute = ...
    debug: bool = ...
    def run(
        self,
        host: Optional[str] = ...,
        port: Optional[int] = ...,
        debug: Optional[bool] = ...,
        load_dotenv: bool = ...,
        **options: Any
    ): ...
    def test_client(self, use_cookies: bool = ..., **kwargs: Any) -> Flask: ...
    def test_cli_runner(self, **kwargs: Any) -> test_cli_runner_class: ...
    def open_session(
        self, request: request_class
    ) -> Optional[SessionMixin]: ...
    def save_session(
        self, session: SessionMixin, response: response_class
    ): ...
    def make_null_session(self) -> NullSession: ...
    def register_blueprint(
        self, blueprint: Blueprint, **options: Any
    ) -> None: ...
    def iter_blueprints(self) -> Iterator[Blueprint]: ...
    def add_url_rule(
        self,
        rule: str,
        endpoint: Optional[str] = ...,
        view_func: Optional[Callable[..., Any]] = ...,
        provide_automatic_options: Optional[bool] = ...,
        **options: Any
    ) -> None: ...
    def route(self, rule: str, **options: Any) -> Callable[..., Any]: ...
    def endpoint(self, endpoint: str) -> Callable[..., Any]: ...
    def errorhandler(self, code_or_exception: int) -> Callable[..., Any]: ...
    def register_error_handler(
        self, code_or_exception: int, f: Callable[..., Any]
    ) -> None: ...
    def template_filter(
        self, name: Optional[str] = ...
    ) -> Callable[..., Any]: ...
    def add_template_filter(
        self, f: Callable[..., Any], name: Optional[str] = ...
    ) -> None: ...
    def template_test(self, name: Optional[Any] = ...): ...
    def add_template_test(self, f: Any, name: Optional[Any] = ...) -> None: ...
    def template_global(self, name: Optional[Any] = ...): ...
    def add_template_global(
        self, f: Callable[..., Any], name: Optional[str] = ...
    ) -> None: ...
    def before_request(self, f: Callable[..., Any]) -> Callable[..., Any]: ...
    def before_first_request(
        self, f: Callable[..., Any]
    ) -> Callable[..., Any]: ...
    def after_request(self, f: Callable[..., Any]) -> Callable[..., Any]: ...
    def teardown_request(
        self, f: Callable[..., Any]
    ) -> Callable[..., Any]: ...
    def teardown_appcontext(
        self, f: Callable[..., Any]
    ) -> Callable[..., Any]: ...
    def context_processor(
        self, f: Callable[..., Any]
    ) -> Callable[..., Any]: ...
    def shell_context_processor(
        self, f: Callable[..., Any]
    ) -> Callable[..., Any]: ...
    def url_value_preprocessor(
        self, f: Callable[..., Any]
    ) -> Callable[..., Any]: ...
    def url_defaults(self, f: Callable[..., Any]) -> Callable[..., Any]: ...
    def handle_http_exception(
        self, e: HTTPException
    ) -> Callable[..., Any]: ...
    def trap_http_exception(self, e: HTTPException) -> bool: ...
    def handle_user_exception(
        self, e: BaseException
    ) -> Callable[..., Any]: ...
    def handle_exception(self, e: BaseException) -> Callable[..., Any]: ...
    def log_exception(self, exc_info: _OptExcInfo) -> None: ...
    def raise_routing_exception(self, request: Request) -> None: ...
    def dispatch_request(self) -> Any: ...
    def full_dispatch_request(self) -> Any: ...
    def finalize_request(
        self, rv: Any, from_error_handler: bool = ...
    ) -> response_class: ...
    def try_trigger_before_first_request_functions(self) -> None: ...
    def make_default_options_response(self) -> response_class: ...
    def should_ignore_error(self, error: BaseException) -> bool: ...
    def make_response(self, rv: _ViewRV) -> response_class: ...
    def create_url_adapter(self, request: Optional[Request]) -> Optional[Map]: ...
    def inject_url_defaults(self, endpoint: str, values: Dict[str, Any]) -> None: ...
    def handle_url_build_error(
        self, error: BaseException, endpoint: str, values: Dict[str, Any]
    ) -> None: ...
    def preprocess_request(self) -> Any: ...
    def process_response(self, response: response_class) -> response_class: ...
    def do_teardown_request(self, exc: BaseException = ...) -> None: ...
    def do_teardown_appcontext(self, exc: BaseException = ...) -> None: ...
    def app_context(self) -> AppContext: ...
    def request_context(self, environ: Environment) -> RequestContext: ...
    def test_request_context(self, *args: Any, **kwargs: Any) -> Optional[RequestContext]: ...
    def wsgi_app(self, environ: Environment, start_response: Callable[..., Any]) -> response_class: ...
    def __call__(self, environ: Environment, start_response: Callable[..., Any]) -> response_class: ...
